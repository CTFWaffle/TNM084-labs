#version 410 core

layout(triangles) in;
in vec4 tcPosition[]; // Original patch vertices
in vec2 tcTexCoord[]; // Output of TC
in vec3 tcNormal[];   // Output of TC
out vec2 teTexCoord;
out vec3 teNormal;

vec3 random3(vec3 st)
{
    st = vec3( dot(st,vec3(127.1,311.7, 543.21)),
              dot(st,vec3(269.5,183.3, 355.23)),
              dot(st,vec3(846.34,364.45, 123.65)) ); // Haphazard additional numbers by IR
    return -1.0 + 2.0*fract(sin(st)*43758.5453123);
}

// Gradient Noise by Inigo Quilez - iq/2013
// https://www.shadertoy.com/view/XdXGW8
// Trivially extended to 3D by Ingemar
float noise(vec3 st)
{
    vec3 i = floor(st);
    vec3 f = fract(st);

    vec3 u = f*f*(3.0-2.0*f);

    return mix(
    			mix( mix( dot( random3(i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ),
                     dot( random3(i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),
                mix( dot( random3(i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ),
                     dot( random3(i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),

    			mix( mix( dot( random3(i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ),
                     dot( random3(i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),
                mix( dot( random3(i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ),
                     dot( random3(i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z

          	);
}

void main()
{
    // Interpolate position, texture coordinates, and normals using barycentric coordinates
    vec4 p0 = gl_TessCoord.x * tcPosition[0];
    vec4 p1 = gl_TessCoord.y * tcPosition[1];
    vec4 p2 = gl_TessCoord.z * tcPosition[2];
    vec2 v0 = gl_TessCoord.x * tcTexCoord[0];
    vec2 v1 = gl_TessCoord.y * tcTexCoord[1];
    vec2 v2 = gl_TessCoord.z * tcTexCoord[2];
    vec3 n0 = gl_TessCoord.x * tcNormal[0];
    vec3 n1 = gl_TessCoord.y * tcNormal[1];
    vec3 n2 = gl_TessCoord.z * tcNormal[2];

    // Interpolated world position
    vec4 worldPos = p0 + p1 + p2;

    // Normalize position to form a sphere
    //float radie = 0.5; // Desired sphere radius
    //float d = length(worldPos.xyz);
    //gl_Position = (radie / d) * worldPos; // Scale to sphere surface
    vec3 spherePos = normalize(worldPos.xyz);

float displacement = noise(spherePos*5.0)*0.1;

    spherePos += spherePos * displacement;

    gl_Position = vec4(spherePos, 1.0);
    

    // Pass interpolated texture coordinates and normalized normals
    teTexCoord = v0 + v1 + v2;
    teNormal = normalize(spherePos); // Adjust normals to sphere
    //teNormal = cross(cross(n1-n0,n1-n2),spherePos);
    //teNormal=cross(n1-n0,n1-n2);
}
